@using System.Text
@using PetHelp.Shared.DTO
@using PetHelp.Shared.Enums

@inject HttpClient KlientHTTP

<PageTitle>Kalendarz</PageTitle>

<div class="calendar">
    <div class="month-section">
        <div class="arrow-container">
            <button class="btn btn-outline-primary btn-arrow" @onclick="()=>OnClick_ChangeCalendarPage(-1)" >
                <span>&lt;=</span>
            </button>
        </div>        
        <div class="month-container">
            @if(DetailsOn)
            {
                <div>@SelectedDay.ToShortDateString()</div>
            }
            else
            {
                <div>@(MiesiaceDict[SelectedDay.Month]) </div>
                <div class="year">[@SelectedDay.Year]</div>
            }
        </div>
        <div class="arrow-container">
            <button class="btn btn-outline-primary btn-arrow" @onclick="()=>OnClick_ChangeCalendarPage(1)">
                <span>=&gt;</span>
            </button>
        </div>        
    </div>
    <table hidden="@DetailsOn">
        <thead>
            <tr>
                <th>Pn</th>
                <th>Wt</th>
                <th>Śr</th>
                <th>Cz</th>
                <th>Pt</th>
                <th>So</th>
                <th class="niedziela" >Nd</th>
            </tr>
        </thead>
        <tbody>
            @for (int d = 1; d <= MonthEnd.Day; )
            {
                <tr>
                    @for (int i = 1; i <= 6; i++)
                    {
                        DateTime ? _day = null;
                        @if(d <= this.MonthEnd.Day)
                        {
                            _day = new DateTime(MonthEnd.Year, MonthEnd.Month, d);
                        }

                        @if (_day.HasValue && _day.Value.DayOfWeek == (DayOfWeek)i)
                        {
                            <td class="@(_day == DateTime.Today?"dzis":String.Empty) day" @onclick="()=>OnClick_OpenDetails(_day.Value)">
                                <div>
                                    @_day.Value.Day
                                </div>
                                <div style="margin-bottom:3px; font-size:8px;">
                                   @(PrintCircles(this.Posilki.Where(x=>x.Date.Year == _day.Value.Year && x.Date.Day == _day.Value.Day).ToList()))
                                </div>
                            </td>
                            d++;
                        }
                        else
                        {
                            <td class="day-other"> - </td>
                            continue;
                        }
                    }

                    @{
                        DateTime? _day_niedziela = null;
                    }
                    @if(d <= this.MonthEnd.Day)
                    {
                        _day_niedziela = new DateTime(MonthEnd.Year, MonthEnd.Month, d);
                    }

                    @if(_day_niedziela.HasValue && _day_niedziela.Value.DayOfWeek == DayOfWeek.Sunday)
                    {
                        <td class="@(_day_niedziela == DateTime.Today?"dzis":String.Empty) day niedziela " @onclick="()=>OnClick_OpenDetails(_day_niedziela.Value)">
                            <div>
                                @_day_niedziela.Value.Day
                            </div>
                            <div style="margin-bottom:3px; font-size:8px;">
                                @(PrintCircles(this.Posilki.Where(x => x.Date.Year == _day_niedziela.Value.Year && x.Date.Day == _day_niedziela.Value.Day).ToList()))
                            </div>
                        </td>
                        d++;
                    }
                    else
                    {
                        <td class="day-other"> - </td>
                    }
                </tr>

            }
        </tbody>
    </table>
    @if(DetailsOn)
    {
        <div class="details-container">
        <div class="details-content">
            @for(int index=1;index<=3;index++)
            {
                int mealType = index;
                    MealRecordDTO? istniejacyPosilek = this.Posilki.FirstOrDefault(x => MatchDay(x,index,SelectedDay));
                
                if(istniejacyPosilek != null)
                {
                    <div class="meal-container">
                    <div class="index">@index</div>
                    <table>
                        <tbody>
                            <tr>
                                <td>Nazwa</td>
                                <td><input type="text" placeholder="Nazwa posiłku" @bind="istniejacyPosilek.Name" /></td>
                            </tr>
                            <tr>
                                <td>Gramatura</td>
                                    <td><input type="number" placeholder="Gramatura w gramach" @bind="istniejacyPosilek.Weight" /></td>
                            </tr>
                            <tr>
                                <td>Godzina</td>
                                <td><input type="time" placeholder="Godzina podania" value="@istniejacyPosilek.Date.ToShortTimeString()"  @onchange="(args) => HandleDateConversion(args, istniejacyPosilek)" style="height: 22px;" /></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                }
                else
                {
                    <div class="meal-container">
                        <div class="index">@mealType</div>
                        @{
                            var _nowyPosilek = this.NowePosilki.FirstOrDefault(x => MatchDay(x, mealType, this.SelectedDay));
                        }
                        @if(_nowyPosilek == null)
                        {
                            <div style="display: flex;width:100%;height:100%;">
                                <input class="btn btn-outline-dark" style="margin-top:auto; margin-bottom:auto; margin-left:auto; margin-right:auto;" hidden="@(_nowyPosilek != null)" type="button" value="dodaj" @onclick="()=>NewMeal(this.SelectedDay,mealType)" />
                            </div>
                        }
                        @if(_nowyPosilek != null)
                        {
                            <table>
                                <tbody>
                                    <tr>
                                        <td>Nazwa</td>
                                        <td><input type="text" placeholder="Nazwa posiłku" @bind="_nowyPosilek.Name" /></td>
                                    </tr>
                                    <tr>
                                        <td>Gramatura</td>
                                        <td><input type="number" placeholder="Gramatura w gramach" @bind="_nowyPosilek.Weight" /></td>
                                    </tr>
                                    <tr>
                                        <td>Godzina</td>
                                        <td>
                                                <input type="time" placeholder="Godzina podania" value="@_nowyPosilek.Date.ToShortTimeString()" @onchange="(args) => HandleDateConversion(args, _nowyPosilek)" style="height: 22px;" />
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        }
                    </div>
                }
            }
        </div>
        <div class="details-buttons">
            <button class="btn btn-outline-success" @onclick="()=>Zapisz()">Zapisz</button>
            <button class="btn btn-outline-danger">Wyczyść</button>
            <div style="width: 100%;"></div>
            <button class="btn btn-outline-primary" @onclick="()=>DetailsOn = false">Wróć</button>
        </div>
    </div>
    }
</div>

@code{
    [Parameter] public int PetID { get; set; }

    List<MealRecordDTO> NowePosilki = new();
    List<MealRecordDTO> Posilki = new();

    bool DetailsOn = false;
    DateTime SelectedDay { get; set; } = default;
    DateTime MonthStart { get; set; }
    DateTime MonthEnd { get; set; }
    const string FULLCIRCLE = "⬤";
    const string EMPTYCIRCLE = "〇";

    public bool MatchDay(MealRecordDTO x, int mealType, DateTime SelectedDay)
    {
        return x.Date.Day == SelectedDay.Day &&
               x.Date.Month == SelectedDay.Month &&
               x.Date.Year == SelectedDay.Year &&
               x.Type == mealType;
    }

    private void HandleDateConversion(ChangeEventArgs args, MealRecordDTO _nowyPosilek)
    {
        _nowyPosilek.Date = default;
        if(args.Value != null)
        {
            if (TimeOnly.TryParse(args.Value.ToString(), out TimeOnly time)) 
            {
                _nowyPosilek.Date = new DateTime(SelectedDay.Year, SelectedDay.Month, SelectedDay.Day, time.Hour, time.Minute, time.Second);
            }
        }
    }

    private void NewMeal(DateTime _day, int _type)
    {
        MealRecordDTO posilek = new(MealRecordDTO.States.Added)
        {
            Date = _day,
            PetId = this.PetID,
            Type = _type
        };

        NowePosilki.Add(posilek);

        StateHasChanged();
    }

    public async Task Zapisz()
    {
        List<Task> _Tasks = new();
        if(this.NowePosilki.Any(x=>x.Date != default))
        {
            _Tasks.Add(Dodaj());
        }

        if(this.Posilki.Any(x=>x.CurrentState == MealRecordDTO.States.Updated))
        {
            _Tasks.Add(Aktualizuj());
        }
        if(!_Tasks.Any())
        {
            Console.WriteLine("Brak zmian do zapisania");
        }
        await Task.WhenAll(_Tasks.ToArray());
    }
    private async Task Dodaj()
    {
        var body = NowePosilki.Where(x => x.Date != default).ToList();
        Console.WriteLine($"Dodawanie {body.Count} wposów do kalendarza");
        var request = await KlientHTTP.PostAsJsonAsync("Meal/AddRange", body);
        if(request.IsSuccessStatusCode)
        {
            var addedData = await request.Content.ReadFromJsonAsync<List<MealRecordDTO>>() ?? new();
            if(addedData.Any())
            {
                this.Posilki.AddRange(addedData);
                this.NowePosilki.Clear();
            }
        }
    }
    private async Task Aktualizuj()
    {
        var body = this.Posilki.Where(x => x.CurrentState == MealRecordDTO.States.Updated).ToList();
        Console.WriteLine($"Aktualizowanie {body.Count} wposów do kalendarza");
        var request = await KlientHTTP.PostAsJsonAsync("Meal/UpdateRange", body);
        if(request.IsSuccessStatusCode)
        {
            body.ForEach(x => x.SetState(MealRecordDTO.States.None));
        }
    }

    public static Dictionary<int, string> MiesiaceDict = new()
    {
        {1,"Styczeń"},{2,"Luty"},{3,"Marzec"},{4,"Kwiecień"},
        {5,"Maj"},{6,"Czerwiec"},{7,"Lipiec"},{8,"Sierpień"},
        {9,"Wrzesień"},{10,"Październik"},{11,"Listopad"},{12,"Grudzień"}
    };

    protected override async Task OnParametersSetAsync()
    {
        this.Posilki = await GetMeals(PetID, DateTime.Now);
        RefreshSelectedDate(DateTime.Now);
    }

    private void RefreshSelectedDate(DateTime _date)
    {
        this.SelectedDay = _date;
        this.MonthStart = new DateTime(SelectedDay.Year, SelectedDay.Month, 1);
        this.MonthEnd = new DateTime(SelectedDay.Year, SelectedDay.Month, DateTime.DaysInMonth(SelectedDay.Year, SelectedDay.Month));
    }

    public async Task OnClick_ChangeCalendarPage(int _number)
    {
        DateTime newDate = this.DetailsOn?this.SelectedDay.AddDays(_number):this.SelectedDay.AddMonths(_number);

        if(this.SelectedDay.Year != newDate.Year || this.SelectedDay.Month != newDate.Month)
        {
            this.Posilki = await GetMeals(PetID,newDate);
        }

        RefreshSelectedDate(newDate);
        StateHasChanged();
    }

    private void OnClick_OpenDetails(DateTime _day)
    {
        RefreshSelectedDate(_day);
        this.DetailsOn = true;
    }

    private async Task<List<MealRecordDTO>> GetMeals(int _petId, DateTime _day)
    {
        var respond = await KlientHTTP.GetAsync($"Meal/{_day.Year}-{_day.Month}/{_petId}");
        if (respond.IsSuccessStatusCode)
        {
            var pobranePosilki = await respond.Content.ReadFromJsonAsync<List<MealRecordDTO>>() ?? new();
            Console.WriteLine($"załadowano {this.Posilki.Count} zarejestrowanych posiłków dla {MiesiaceDict[_day.Month]} {_day.Year}r.");
            return pobranePosilki;
        }

        Console.WriteLine($"Brak zarejestrowanych posiłków dla {MiesiaceDict[_day.Month]} {_day.Year}r.");
        return new();
    }

    private string PrintCircles(List<MealRecordDTO> _posilki)
    {
        char xxx = Convert.ToChar(FULLCIRCLE);

        StringBuilder sb = new(String.Concat(EMPTYCIRCLE,EMPTYCIRCLE,EMPTYCIRCLE));

        _posilki.ForEach(x => { 
            sb[(int)x.Type - 1] = Convert.ToChar(FULLCIRCLE); 
        });

        return sb.ToString();
    }
       
}